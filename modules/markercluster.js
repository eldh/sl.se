var d;
function f(a, b, c) {
    this.extend(f, google.maps.OverlayView); this.b = a; this.a = []; this.f = []; this.da = [53, 56, 66, 78, 90]; this.j = []; this.A = !1; c = c || {}; this.g = c.gridSize || 60; this.l = c.minimumClusterSize || 2; this.K = c.maxZoom || null; this.j = c.styles || []; this.Y = c.imagePath || this.R; this.X = c.imageExtension || this.Q; this.P = !0; void 0 != c.zoomOnClick && (this.P = c.zoomOnClick); this.r = !1; void 0 != c.averageCenter && (this.r = c.averageCenter); k(this); this.setMap(a); this.L = this.b.getZoom(); var e = this; google.maps.event.addListener(this.b, "zoom_changed",
function () { var a = e.b.getZoom(), b = e.b.minZoom || 0, c = Math.min(e.b.maxZoom || 100, e.b.mapTypes[e.b.getMapTypeId()].maxZoom), a = Math.min(Math.max(a, b), c); e.L != a && (e.L = a, e.m()) }); google.maps.event.addListener(this.b, "idle", function () { e.i() }); b && (b.length || Object.keys(b).length) && this.C(b, !1)
} d = f.prototype; d.R = "http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/images/m"; d.Q = "png";
d.extend = function (a, b) { return function (a) { for (var b in a.prototype) this.prototype[b] = a.prototype[b]; return this } .apply(a, [b]) }; d.onAdd = function () { this.A || (this.A = !0, l(this)) }; d.draw = function () { }; function k(a) { if (!a.j.length) for (var b = 0, c; c = a.da[b]; b++) a.j.push({ url: a.Y + (b + 1) + "." + a.X, height: c, width: c }) } d.T = function () { for (var a = this.o(), b = new google.maps.LatLngBounds, c = 0, e; e = a[c]; c++) b.extend(e.getPosition()); this.b.fitBounds(b) }; d.w = function () { return this.j }; d.o = function () { return this.a }; d.W = function () { return this.a.length };
d.ca = function (a) { this.K = a }; d.J = function () { return this.K }; d.G = function (a, b) { for (var c = 0, e = a.length, g = e; 0 !== g; ) g = parseInt(g / 10, 10), c++; c = Math.min(c, b); return { text: e, index: c} }; d.aa = function (a) { this.G = a }; d.H = function () { return this.G }; d.C = function (a, b) { if (a.length) for (var c = 0, e; e = a[c]; c++) q(this, e); else if (Object.keys(a).length) for (e in a) q(this, a[e]); b || this.i() }; function q(a, b) { b.s = !1; b.draggable && google.maps.event.addListener(b, "dragend", function () { b.s = !1; a.M() }); a.a.push(b) }
d.q = function (a, b) { q(this, a); b || this.i() }; function r(a, b) { var c = -1; if (a.a.indexOf) c = a.a.indexOf(b); else for (var e = 0, g; g = a.a[e]; e++) if (g == b) { c = e; break } if (-1 == c) return !1; b.setMap(null); a.a.splice(c, 1); return !0 } d.Z = function (a, b) { var c = r(this, a); return !b && c ? (this.m(), this.i(), !0) : !1 }; d.$ = function (a, b) { for (var c = !1, e = 0, g; g = a[e]; e++) g = r(this, g), c = c || g; if (!b && c) return this.m(), this.i(), !0 }; d.V = function () { return this.f.length }; d.getMap = function () { return this.b }; d.setMap = function (a) { this.b = a }; d.I = function () { return this.g };
d.ba = function (a) { this.g = a }; d.v = function (a) { var b = this.getProjection(), c = new google.maps.LatLng(a.getNorthEast().lat(), a.getNorthEast().lng()), e = new google.maps.LatLng(a.getSouthWest().lat(), a.getSouthWest().lng()), c = b.fromLatLngToDivPixel(c); c.x += this.g; c.y -= this.g; e = b.fromLatLngToDivPixel(e); e.x -= this.g; e.y += this.g; c = b.fromDivPixelToLatLng(c); b = b.fromDivPixelToLatLng(e); a.extend(c); a.extend(b); return a }; d.S = function () { this.m(!0); this.a = [] };
d.m = function (a) { for (var b = 0, c; c = this.f[b]; b++) c.remove(); for (b = 0; c = this.a[b]; b++) c.s = !1, a && c.setMap(null); this.f = [] }; d.M = function () { var a = this.f.slice(); this.f.length = 0; this.m(); this.i(); window.setTimeout(function () { for (var b = 0, c; c = a[b]; b++) c.remove() }, 0) }; d.i = function () { l(this) };
function l(a) {
    if (a.A) for (var b = new google.maps.LatLngBounds(a.b.getBounds().getSouthWest(), a.b.getBounds().getNorthEast()), b = a.v(b), c = 0, e; e = a.a[c]; c++) if (!e.s && b.contains(e.getPosition())) {
        for (var g = a, s = 4E4, n = null, v = 0, m = void 0; m = g.f[v]; v++) {
            var h = m.getCenter(); if (h) {
                var p = e.getPosition(); if (h && p) var w = (p.lat() - h.lat()) * Math.PI / 180, x = (p.lng() - h.lng()) * Math.PI / 180, h = Math.sin(w / 2) * Math.sin(w / 2) + Math.cos(h.lat() * Math.PI / 180) * Math.cos(p.lat() * Math.PI / 180) * Math.sin(x / 2) * Math.sin(x / 2), h = 12742 * Math.atan2(Math.sqrt(h),
Math.sqrt(1 - h)); else h = 0; h < s && (s = h, n = m)
            } 
        } n && n.F.contains(e.getPosition()) ? n.q(e) : (m = new t(g), m.q(e), g.f.push(m))
    } 
} function t(a) { this.k = a; this.b = a.getMap(); this.g = a.I(); this.l = a.l; this.r = a.r; this.d = null; this.a = []; this.F = null; this.n = new u(this, a.w()) } d = t.prototype;
d.q = function (a) {
    var b; a: if (this.a.indexOf) b = -1 != this.a.indexOf(a); else { b = 0; for (var c; c = this.a[b]; b++) if (c == a) { b = !0; break a } b = !1 } if (b) return !1; this.d ? this.r && (c = this.a.length + 1, b = (this.d.lat() * (c - 1) + a.getPosition().lat()) / c, c = (this.d.lng() * (c - 1) + a.getPosition().lng()) / c, this.d = new google.maps.LatLng(b, c), y(this)) : (this.d = a.getPosition(), y(this)); a.s = !0; this.a.push(a); b = this.a.length; b < this.l && a.getMap() != this.b && a.setMap(this.b); if (b == this.l) for (c = 0; c < b; c++) this.a[c].setMap(null); b >= this.l && a.setMap(null);
    a = this.b.getZoom(); if ((b = this.k.J()) && a > b) for (a = 0; b = this.a[a]; a++) b.setMap(this.b); else this.a.length < this.l ? z(this.n) : (b = this.k.H()(this.a, this.k.w().length), this.n.setCenter(this.d), a = this.n, a.B = b, a.c && (a.c.innerHTML = b.text), b = Math.max(0, a.B.index - 1), b = Math.min(a.j.length - 1, b), b = a.j[b], a.ea = b.url, a.h = b.height, a.p = b.width, a.N = b.textColor, a.e = b.anchor, a.O = b.textSize, a.D = b.backgroundPosition, this.n.show()); return !0
};
d.getBounds = function () { for (var a = new google.maps.LatLngBounds(this.d, this.d), b = this.o(), c = 0, e; e = b[c]; c++) a.extend(e.getPosition()); return a }; d.remove = function () { this.n.remove(); this.a.length = 0; delete this.a }; d.U = function () { return this.a.length }; d.o = function () { return this.a }; d.getCenter = function () { return this.d }; function y(a) { var b = new google.maps.LatLngBounds(a.d, a.d); a.F = a.k.v(b) } d.getMap = function () { return this.b };
function u(a, b) { a.k.extend(u, google.maps.OverlayView); this.j = b; this.u = a; this.d = null; this.b = a.getMap(); this.B = this.c = null; this.t = !1; this.setMap(this.b) } d = u.prototype;
d.onAdd = function () { this.c = document.createElement("DIV"); if (this.t) { var a = A(this, this.d); this.c.style.cssText = B(this, a); this.c.innerHTML = this.B.text } this.getPanes().overlayMouseTarget.appendChild(this.c); var b = this; google.maps.event.addDomListener(this.c, "click", function () { var a = b.u.k; google.maps.event.trigger(a, "clusterclick", b.u); a.P && b.b.fitBounds(b.u.getBounds()) }) }; function A(a, b) { var c = a.getProjection().fromLatLngToDivPixel(b); c.x -= parseInt(a.p / 2, 10); c.y -= parseInt(a.h / 2, 10); return c }
d.draw = function () { if (this.t) { var a = A(this, this.d); this.c.style.top = a.y + "px"; this.c.style.left = a.x + "px" } }; function z(a) { a.c && (a.c.style.display = "none"); a.t = !1 } d.show = function () { if (this.c) { var a = A(this, this.d); this.c.style.cssText = B(this, a); this.c.style.display = "" } this.t = !0 }; d.remove = function () { this.setMap(null) }; d.onRemove = function () { this.c && this.c.parentNode && (z(this), this.c.parentNode.removeChild(this.c), this.c = null) }; d.setCenter = function (a) { this.d = a };
function B(a, b) {
    var c = []; c.push("background-image:url(" + a.ea + ");"); c.push("background-position:" + (a.D ? a.D : "0 0") + ";"); "object" === typeof a.e ? ("number" === typeof a.e[0] && 0 < a.e[0] && a.e[0] < a.h ? c.push("height:" + (a.h - a.e[0]) + "px; padding-top:" + a.e[0] + "px;") : c.push("height:" + a.h + "px; line-height:" + a.h + "px;"), "number" === typeof a.e[1] && 0 < a.e[1] && a.e[1] < a.p ? c.push("width:" + (a.p - a.e[1]) + "px; padding-left:" + a.e[1] + "px;") : c.push("width:" + a.p + "px; text-align:center;")) : c.push("height:" + a.h + "px; line-height:" + a.h +
"px; width:" + a.p + "px; text-align:center;"); c.push("cursor:pointer; top:" + b.y + "px; left:" + b.x + "px; color:" + (a.N ? a.N : "black") + "; position:absolute; font-size:" + (a.O ? a.O : 11) + "px; font-family:Arial,sans-serif; font-weight:bold"); return c.join("")
} window.MarkerClusterer = f; f.prototype.addMarker = f.prototype.q; f.prototype.addMarkers = f.prototype.C; f.prototype.clearMarkers = f.prototype.S; f.prototype.fitMapToMarkers = f.prototype.T; f.prototype.getCalculator = f.prototype.H; f.prototype.getGridSize = f.prototype.I;
f.prototype.getExtendedBounds = f.prototype.v; f.prototype.getMap = f.prototype.getMap; f.prototype.getMarkers = f.prototype.o; f.prototype.getMaxZoom = f.prototype.J; f.prototype.getStyles = f.prototype.w; f.prototype.getTotalClusters = f.prototype.V; f.prototype.getTotalMarkers = f.prototype.W; f.prototype.redraw = f.prototype.i; f.prototype.removeMarker = f.prototype.Z; f.prototype.removeMarkers = f.prototype.$; f.prototype.resetViewport = f.prototype.m; f.prototype.repaint = f.prototype.M; f.prototype.setCalculator = f.prototype.aa;
f.prototype.setGridSize = f.prototype.ba; f.prototype.setMaxZoom = f.prototype.ca; f.prototype.onAdd = f.prototype.onAdd; f.prototype.draw = f.prototype.draw; t.prototype.getCenter = t.prototype.getCenter; t.prototype.getSize = t.prototype.U; t.prototype.getMarkers = t.prototype.o; u.prototype.onAdd = u.prototype.onAdd; u.prototype.draw = u.prototype.draw; u.prototype.onRemove = u.prototype.onRemove; Object.keys = Object.keys || function (a) { var b = [], c; for (c in a) a.hasOwnProperty(c) && b.push(c); return b };